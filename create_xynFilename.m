
function xynFilename = create_xynFilename( findClustersStruct )

if ~isa(findClustersStruct,'FindClustersStruct')
    error('The input variable to create_xynFilename is not of FindClustersStruct data type');
end

% analysis_pixel_size = findClustersStruct.analysis_pixel_size;
% findClustersStruct.analysis_pixel_size = ;
% roi = findClustersStruct.sum_roi_size;
% threshold = findClustersStruct.sum_threshold;
% factor = findClustersStruct.factor;
% precision = findClustersStruct.localization_precision;
% minCluster = findClustersStruct.minimum_molecules_per_cluster;
% max_area = findClustersStruct.max_segmentation_area;

% useChannel = findClustersStruct.use_channels;
channels = sprintf('%d,',findClustersStruct.use_channels);


subFolder = 'cluster_analysis';
[pathstr,name,~] = fileparts(findClustersStruct.i3file);


if findClustersStruct.use_iterative_segmentation
    fname = sprintf('%s_roi%d_th%d_fac%g_ch%s_pix%d_prec%g_min%d_area%d.xyn', ...
        name, ...
        findClustersStruct.sum_roi_size, ...
        findClustersStruct.sum_threshold, ...
        findClustersStruct.factor, ...
        channels(1:end-1), ...
        findClustersStruct.analysis_pixel_size, ...
        findClustersStruct.localization_precision, ...
        findClustersStruct.minimum_molecules_per_cluster, ...
        findClustersStruct.max_segmentation_area);
else
    fname = sprintf('%s_roi%d_th%d_fac%g_ch%s_pix%d_prec%g_min%d.xyn', ...
        name, ...
        findClustersStruct.sum_roi_size, ...
        findClustersStruct.sum_threshold, ...
        findClustersStruct.factor, ...
        channels(1:end-1), ...
        findClustersStruct.analysis_pixel_size, ...
        findClustersStruct.localization_precision, ...
        findClustersStruct.minimum_molecules_per_cluster);
end
xynFilename = fullfile(pathstr, subFolder, fname);


end % of function