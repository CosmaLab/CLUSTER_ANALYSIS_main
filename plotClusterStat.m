% function to plot cluster analysis statistics from a single analysis
%   intended to be called immediately after the extractClusterStats.m
%   function, which uses the output of the FindClusters.m function
%
% inputs
%   filename - name of the localization list used in cluster identification
%   xynData - first output from function: extractClusterStats.m, which is a
%       multi-field structure containing data about in-island cluster
%       statistics.  This data is calculated from data in the .xyn file.
%   mask - structure containing information of the binary mask created from
%       the localization list using Locs2Mask.m.  Fields:
%       'convArea' = area of the image containing fluorescence information
%           at the conventional, diffraction limited level
%       'SRArea' = area of the iamge containing localizations obtained
%           by reducing the pixel size in the mask to the level of
%           localization precision
%   ClustStats - Third output from function: extractClusterStats.m, which
%       contains data comparing single vs. in-island cluster numbers
%   ddcData - Second output from function: extractClusterStats.m, which is 
%       a multi-field structure containing data about global NND data.
%       This data is extracted from the .ddc file.
%   params - FindClusters.m input parameters generated by either the
%       function: defineFindClustersStruct.m or FindClustersStruct.m and
%       that are used for cluster analysis

function figureHandle = plotClusterStat(filename, xynData, mask, ClustStats, ddcData, params)


[~, filename, ~] = fileparts(filename);

titleFontSz = 9;
annotationFontSz = 10.5;
annotationYpos = 0.9;
axisLabelFontSz = 8.5;
axisScaleFontSz = 8;
legendFontSz = 7;
ylimIncrease = 1.05;
ylabelstr = 'Probability';


nr = 3;
nc = 2;
sb = nan(nr*nc,1);

figureHandle = figure('OuterPosition',[285 50 450 630]);%,'units','normalized');
set(figureHandle,'position',[300 50 450*nc 285*nr])
%     nDomains = size(ClusterResults,1);

% include file name as annotation
titlefilename = filename;
titlefilename( titlefilename == '_' ) = '-';
%         posA = [0.5-0.5*length(titlefilename)*0.02 annotationYpos length(titlefilename)*0.02 0.03];
%         if posA(3) > 1, posA(3) = 1;
%         elseif posA(3) < 0, posA(3) = 0; end
h_annot = annotation(figureHandle,'textbox',...posA,...
    'String',{titlefilename},...
    'FitBoxToText','on','EdgeColor','none',...
    'FontSize',annotationFontSz);
posA = get(h_annot,'position');
set(h_annot,'position',[0.3 annotationYpos posA(3:4)])
%         set(h_annot,'position',[0.5-0.5*posA(3) annotationYpos posA(3:4)])


sp = 1;
% distribution of number of localizations per nanodomain
sb(sp) = subplot(nr,nc,sp,'Parent',figureHandle,'XScale','log','XMinorTick','on');
h_nLoc = nan(3,1);
ctall = cell(3,1);
box(sb(sp),'on')
hold(sb(sp),'on')
plotdata = xynData.numberLocs;
% Jan 4 2016 update for plotting with stair function
[bins,ct] = plotStairs(plotdata);
h_nLoc(1) = stairs(sb(sp),bins,ct,...
    'Color','b',...
    'LineStyle','-');
ctall{1} = ct;
plotdata = xynData.nLocsSingleCluster;
[bins,ct] = plotStairs(plotdata);
h_nLoc(2) = stairs(sb(sp),bins,ct,...
    'Color','r',...
    'LineStyle','--');
ctall{2} = ct;
plotdata = xynData.nLocsIslandCluster;
[bins,ct] = plotStairs(plotdata);
h_nLoc(3) = stairs(sb(sp),bins,ct,...
    'Color','k',...
    'LineStyle','-.');
ctall{3} = ct;
xlabel(sb(sp),'Number of Localizations/nanodomain','FontSize', axisLabelFontSz)
ylabel(sb(sp),ylabelstr,'FontSize', axisLabelFontSz)
title(sb(sp),['Median # Loc/nanodomain = {\color{blue}' num2str( median(xynData.numberLocs),'%.3g' ) ...
    '}, {\color{red}' num2str( median(xynData.nLocsSingleCluster),'%.3g' )  ...
    '}, '  num2str( median(xynData.nLocsIslandCluster),'%.3g' )],...
    'FontSize', titleFontSz)
hleg = legend(h_nLoc,'All Clusters','Single Clusters','In-Island Clusters',...
    'Location','Best');
set(hleg,'FontSize', legendFontSz)
axis(sb(sp),[1 2e3 0 max(cell2mat(ctall))*ylimIncrease])
set(sb(sp),'XScale','log','XLim',[1 2000])
set(sb(sp),'XScale','log','XTickLabel',{'1' '10' '100' '1000'},'FontSize',axisScaleFontSz)

%         % adjust annotation position
%         posP = get(sb(1),'Position');
%         posA = get(h,'Position');
%         posA(1) = posP(1)+0.5*(posP(3)-posA(3));
%         if posA(1) < 0, posA(1) = 0; end
%         posA(2) = annotationYpos;
%         set(h,'Position',posA)


sp = sp+1; % 2
% area occupied by clusters, either solo or in-island
sb(sp) = subplot(nr,nc,sp,'Parent',figureHandle);
box(sb(sp),'on')
plotdata = [0,xynData.OccupiedArea(2:3);...
    xynData.OccupiedArea(1),0,0]/mask.SRArea;
hbar = bar(sb(sp),100*plotdata,...
    'stacked');
set(sb(sp),'XLim',[0.4 1.6],'XTickLabel',{' '},'FontSize', axisLabelFontSz)
ylabel(sb(sp),'Cluster-occupied S.R. area (%)')
hleg = legend(hbar(2:3),'Single Clusters','In-Island Clusters',...
    'Location','North');
set(hleg,'FontSize', legendFontSz)
title(sb(sp),['Conv Area = ' num2str(mask.convArea,'%.3g') ' \mum^2, '...
    'SR Area = ' num2str(mask.SRArea,'%.3g') ' \mum^2 (' ...
    num2str(100*mask.SRArea/mask.convArea,'%.3g') '%)'],...
    'FontSize', titleFontSz)


sp = sp+1; % 3
% distribution of nanodomain area
% areas = [pi*results(:,4).*results(:,5), pi*results(:,6).^2, pi*results(:,7).^2].*original_pixel_size^2;
% ellipse area, circle radius=avg(sigX,sigY), circle radius = sqrt(sigX^2+sigY^2)
sb(sp) = subplot(nr,nc,sp,'Parent',figureHandle,'XScale','log','XMinorTick','on');
h_area = nan(3,1);
ctall = cell(3,1);
box(sb(sp),'on')
hold(sb(sp),'on')
plotdata = xynData.clusterArea;
% Jan 4 2016 update for plotting with stair function
[bins,ct] = plotStairs(plotdata);
h_area(1) = stairs(sb(sp),bins,ct,...
    'Color','b',...
    'LineStyle','-');
ctall{1} = ct;
plotdata = xynData.singleClusterArea;
[bins,ct] = plotStairs(plotdata);
h_area(2) = stairs(sb(sp),bins,ct,...
    'Color','r',...
    'LineStyle','--');
ctall{2} = ct;
plotdata = xynData.islandClustersArea;
[bins,ct] = plotStairs(plotdata);
h_area(3) = stairs(sb(sp),bins,ct,...
    'Color','k',...
    'LineStyle','-.');
ctall{3} = ct;
xlabel(sb(sp),'Nanodomain Area (nm^2)','FontSize', axisLabelFontSz)
ylabel(sb(sp),ylabelstr,'FontSize', axisLabelFontSz)
title(sb(sp),['Cluster Area: median = {\color{blue}' num2str( median(xynData.clusterArea),'%.3g' ) ...
    '}, {\color{red}' num2str( median(xynData.singleClusterArea),'%.3g' )  ...
    '}, '  num2str( median(xynData.islandClustersArea),'%.3g' ) ...
    ', average = {\color{blue}' num2str( mean(xynData.clusterArea),'%.3g' ) ...
    '}, {\color{red}' num2str( mean(xynData.singleClusterArea),'%.3g' )  ...
    '}, '  num2str( mean(xynData.islandClustersArea),'%.3g' )],...
    'FontSize', titleFontSz)
hleg = legend(h_area,'All Clusters','Single Clusters','In-Island Clusters',...
    'Location','NorthWest');
set(hleg,'FontSize', legendFontSz)
axis(sb(sp),[10 2e4 0 max(cell2mat(ctall))*ylimIncrease])
set(sb(sp),'XScale','log','XTickLabel',{'10' '100' '1000' '10000'},'FontSize',axisScaleFontSz)

sp = sp+1; % 4
% number of clusters & number in-island vs solo
sb(sp) = subplot(nr,nc,sp,'Parent',figureHandle);
box(sb(sp),'on')
plotdata = ...
    [0,ClustStats.nSingleClusters,ClustStats.nInIslandClusters;...
    ClustStats.nIslands,0,0 ]./mask.SRArea;
hbar = bar(sb(sp), plotdata, 'stacked');
set(sb(sp),'XTickLabel',{'Clusters';'Islands'},'FontSize', axisLabelFontSz)
ylabel(sb(sp),'Density [1/\mum^2]','FontSize', axisLabelFontSz)
title(sb(sp),['Single clusters = ' num2str(100*ClustStats.Frac_Single,'%.3g') '%'],...
    'FontSize', titleFontSz)
hleg = legend(hbar(2:3),'Single Clusters','In-islanded Clusters',...
    'Location','North');
set(hleg,'FontSize', legendFontSz)

sp = sp+1; % 5
% XYN distribution of in-island nearest neighbor distances
sb(sp) = subplot(nr,nc,sp,'Parent',figureHandle,'XScale','linear','XMinorTick','on');
grn = [0 0.4 0];
h_nnd = nan(2,1);
ctall = cell(2,1);
box(sb(sp),'on')
hold(sb(sp),'on')
plotdata = xynData.nndXY;
% Jan 4 2016 update for plotting with stair function
[bins,ct] = plotStairs(plotdata,[],'linear');
h_nnd(1) = stairs(sb(sp),bins,ct,...
    'Color','k',...
    'LineStyle','-');
ctall{1} = ct;
plotdata = ddcData.nndXY;
[bins,ct] = plotStairs(plotdata,[],'linear');
h_nnd(2) = stairs(sb(sp),bins,ct,...
    'Color',grn,...
    'LineStyle','--');
ctall{2} = ct;
xlabel(sb(sp),'Nearest Neighbor Distance (nm)','FontSize', axisLabelFontSz)
ylabel(sb(sp),ylabelstr,'FontSize', axisLabelFontSz)
title(sb(sp),['NND''s: median = ' num2str( median(xynData.nndXY),'%.3g' ) ...
    ', {\color[rgb]{0 0.4 0}' num2str( median(ddcData.nndXY),'%.3g' ) ...
    '}, average = ' num2str( mean(xynData.nndXY),'%.3g' ) ...
    ', {\color[rgb]{0 0.4 0}' num2str( mean(ddcData.nndXY),'%.3g' ) '} nm'],...
    'FontSize', titleFontSz)
hleg = legend(h_nnd,'In-Island XYN','Global DDC',...
    'Location','NorthEast');
set(hleg,'FontSize', legendFontSz)
axis(sb(sp),[0 200 0 max(cell2mat(ctall))*ylimIncrease])

sp = sp+1; % 6
% DDC global NND
sb(sp) = subplot(nr,nc,sp,'Parent',figureHandle);
axis(sb(sp),[0 1 0 1])
axis(sb(sp),'off')
% hold(sb(sp),'on')
% get the field information for display & altering
fields = fieldnames(params);
% skip the first field, which is 'i3file'
fields = fields( cellfun(@isempty,strfind(fields,'i3file')) ); 
fields = fields( cellfun(@isempty,strfind(fields,'image')) ); 
fields = fields( cellfun(@isempty,strfind(fields,'drift')) ); 
fields = fields( cellfun(@isempty,strfind(fields,'draw')) ); 
fields = fields( cellfun(@isempty,strfind(fields,'show')) ); 
% open fields
nfields = length(fields);
for p = 1:nfields
    strng = fields{p};
    strng( strng=='_' ) = ' ';
    strng = [strng ' = ' num2str( params.(fields{p}) )];
    text(0.1, 1-(p-1)/(nfields-1), strng, 'FontSize', 8)
end


end % of function
